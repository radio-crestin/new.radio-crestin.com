/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetStations {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n": typeof types.GetStationsDocument,
    "\n  query GetStationsList {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      slug\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      uptime {\n        is_up\n      }\n      now_playing {\n        id\n        song {\n          name\n          artist {\n            name\n          }\n        }\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n": typeof types.GetStationsListDocument,
    "\n  query GetStationDetail {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n  }\n": typeof types.GetStationDetailDocument,
};
const documents: Documents = {
    "\n  query GetStations {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n": types.GetStationsDocument,
    "\n  query GetStationsList {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      slug\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      uptime {\n        is_up\n      }\n      now_playing {\n        id\n        song {\n          name\n          artist {\n            name\n          }\n        }\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n": types.GetStationsListDocument,
    "\n  query GetStationDetail {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n  }\n": types.GetStationDetailDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetStations {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStations {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetStationsList {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      slug\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      uptime {\n        is_up\n      }\n      now_playing {\n        id\n        song {\n          name\n          artist {\n            name\n          }\n        }\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStationsList {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      slug\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      uptime {\n        is_up\n      }\n      now_playing {\n        id\n        song {\n          name\n          artist {\n            name\n          }\n        }\n      }\n    }\n    station_groups {\n      id\n      name\n      order\n      station_to_station_groups {\n        station_id\n        order\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetStationDetail {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStationDetail {\n    stations(order_by: { order: asc }) {\n      id\n      order\n      title\n      website\n      slug\n      email\n      stream_url\n      proxy_stream_url\n      hls_stream_url\n      thumbnail_url\n      total_listeners\n      radio_crestin_listeners\n      description\n      description_action_title\n      description_link\n      feature_latest_post\n      station_streams {\n        type\n        stream_url\n      }\n      posts(limit: 1, order_by: { published: desc }) {\n        id\n        title\n        description\n        link\n        published\n      }\n      uptime {\n        is_up\n        latency_ms\n        timestamp\n      }\n      now_playing {\n        id\n        timestamp\n        song {\n          id\n          name\n          thumbnail_url\n          artist {\n            id\n            name\n            thumbnail_url\n          }\n        }\n      }\n      reviews {\n        id\n        stars\n        message\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;